// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/tylerb/graceful"

	"github.com/snuffalo/streamDigest/restapi/operations"
	"github.com/snuffalo/streamDigest/restapi/operations/digest"
	"github.com/snuffalo/streamDigest/impl"
	"github.com/snuffalo/streamDigest/models"
	"strconv"
	"database/sql"
	"log"
	_ "github.com/go-sql-driver/mysql"
	"github.com/go-redis/redis"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name streamdigest --spec ../swagger.yml

const BASE_TEN = 10

func configureFlags(api *operations.StreamdigestAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.StreamdigestAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf
	api.Logger = log.Printf

	dbchan := make(chan *sql.DB, 1)
	rcchan := make(chan *redis.Client, 1)

	api.Logger("Configuring streamdigest API...")
	go connectToMysql(dbchan, api.Logger)
	go connectToRedis(rcchan, api.Logger)

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	db := <-dbchan
	rc := <-rcchan

	api.DigestGetDigestByStreamerIDHandler = digest.GetDigestByStreamerIDHandlerFunc(func(params digest.GetDigestByStreamerIDParams) middleware.Responder {
		return digest.NewGetDigestByStreamerIDOK().WithPayload(impl.GetDigestByStreamerId(params.StreamerID, db, rc))
	})

	api.DigestAddClipByStreamerIDHandler = digest.AddClipByStreamerIDHandlerFunc(func(params digest.AddClipByStreamerIDParams) middleware.Responder{
		var res = impl.AddClipToDigestByStreamerId(params.Clip, params.StreamerID, db, rc, api.Logger)
		if res == impl.SUCCESS {
			return digest.NewAddClipByStreamerIDCreated()
		} else if res == impl.DUPLICATE_CLIP {
			return digest.NewAddClipByStreamerIDConflict().WithPayload(&models.DuplicateClip{Message: "Duplicate clip \"" + params.Clip.URL + "\" for streamer id \"" + strconv.FormatUint(params.StreamerID, BASE_TEN) + "\"."})
		} else if res == impl.INSERT_ERROR {
			return digest.NewAddClipByStreamerIDDefault(500).WithPayload(&models.UnexpectedError{Message:"Unable to successfully insert to the database"})
		} else {
			return digest.NewAddClipByStreamerIDDefault(500).WithPayload(&models.UnexpectedError{Message:"Uh oh. Something went wrong"})
		}
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}

func connectToRedis(rcc chan *redis.Client, log func(string, ...interface{})){
	defer close(rcc)
	rc := redis.NewClient(&redis.Options{
		Addr:"streamdigestredis:6379",
		Password: "",
		DB: 0})

	log("Pinging redis for connection...")
	pong, err := rc.Ping().Result()
	if pong == "PONG" {
		log("Ping to redis successful.")
		rcc <- rc
	} else {
		panic(err)
	}

}

func connectToMysql(dbc chan *sql.DB, log func(string, ...interface{})) {
	defer close(dbc)
	//Open doesn't actually try a connection
	db, err := sql.Open("mysql", "root:password@tcp(mysql:3306)/streamDigest")
	if (err == nil) {
		log("Pinging db for connection...")
		err := db.Ping()
		if err == nil {
			log("Ping to mysql successful.")
			 dbc <- db
		} else {
			log("%s", err.Error())
			panic(err)
		}
	} else {
		log("%s", err.Error())
		panic(err)
	}
}
